// Generated by CoffeeScript 1.12.4
(function() {
  var Acuity, Q, _, auth, cancelAppointment, changeAppointment, findAppointment, findByEmail, findById, findByMultipleIds, formatMsg, local, moment, today, type;

  Acuity = require('acuityscheduling');

  local = require('../../config/local');

  formatMsg = require('./formatApptMessageService');

  moment = require('moment');

  _ = require('underscore');

  today = moment().format();

  Array.prototype.where = function(query) {
    var hit;
    if (typeof query !== "object") {
      return [];
    }
    hit = Object.keys(query).length;
    return this.filter(function(item) {
      var key, match, value;
      match = 0;
      for (key in query) {
        value = query[key];
        if (item[key] === value) {
          match += 1;
        }
      }
      if (match === hit) {
        return true;
      } else {
        return false;
      }
    });
  };

  Q = function(ids, auth) {
    return findByMultipleIds(ids, auth);
  };

  findById = function(id, auth) {
    var acuity;
    acuity = Acuity.basic(auth);
    return new Promise(function(resolve, reject) {
      return acuity.request("appointments/" + id, function(err, response, appointment) {
        appointment;
        var success;
        success = true;
        if (success) {
          return resolve(appointment);
        } else {
          return reject(Error, err);
        }
      });
    });
  };

  findByEmail = function(email, auth) {
    var acuity, capEmail, capitalized;
    console.log(email);
    console.log(today);
    acuity = Acuity.basic(auth);
    capitalized = function(email) {
      return email[0].toUpperCase() + email.substr(1);
    };
    capEmail = capitalized(email);
    return new Promise(function(resolve, reject) {
      return acuity.request("appointments", function(err, response, appointments) {
        var appointmentId, appts, success;
        appts = [];
        appointmentId = function(appointments) {
          var appointment, i, len, results1;
          results1 = [];
          for (i = 0, len = appointments.length; i < len; i++) {
            appointment = appointments[i];
            if (appointment.email === capEmail) {
              results1.push(appts.push(appointment.id));
            } else if (appointment.email === email) {
              results1.push(appts.push(appointment.id));
            } else {
              results1.push('none found');
            }
          }
          return results1;
        };
        appointmentId(appointments);
        success = true;
        if (success) {
          return resolve(appts);
        } else {
          return reject(Error, err);
        }
      });
    });
  };

  findByMultipleIds = function(apptIds, auth) {
    var appts, index;
    appts = [];
    index = 0;
    apptIds.forEach(function(ids) {
      appts.push((function(ids) {
        return new Promise((function(resolve, reject) {
          return findById(ids, auth).then(function(appt) {
            appt;
            var success;
            success = true;
            if (success) {
              return resolve(appt);
            } else {
              return reject(Error, err);
            }
          });
        }));
      })(ids, index++));
    });
    return Promise.all(appts);
  };

  type = 'email';

  auth = {
    userId: 13277271,
    apiKey: '268ba575326cc2fe94d6b780009bee25'
  };

  findAppointment = function(options, auth) {
    return new Promise(function(resolve, reject) {
      var email, foo, opts, theAppt, useEmail, useId;
      console.log(options);
      opts = {};
      theAppt = [];
      useEmail = false;
      if (options.type === 'email') {
        useEmail = true;
        email = options.email;
        if (typeof options.id === "function") {
          options.id(false);
        }
        opts.email = email;
        console.log(opts);
      } else {
        console.log('ok');
      }
      if (options.type === 'id') {
        opts.id = options.id;
        console.log(opts);
      }
      if (useEmail === true) {
        foo = function(opts, auth) {
          return new Promise(function(resolve, reject) {
            return findByEmail(opts.email, auth).then(function(ids) {
              return Q(ids, auth).then(function(appts) {
                var appt, i, len, success;
                for (i = 0, len = appts.length; i < len; i++) {
                  appt = appts[i];
                  theAppt.push(appt);
                }
                success = true;
                if (success) {
                  return resolve(theAppt);
                } else {
                  return reject(Error, err);
                }
              });
            });
          });
        };
        return foo(opts, auth).then(function(theAppt) {
          var success;
          Promise.resolve(theAppt);
          success = true;
          if (success) {
            return resolve(theAppt);
          } else {
            return reject(Error, err);
          }
        });
      } else {
        console.log("it's an id");
        useId = function(opts, auth) {
          return new Promise(function(resolve, reject) {
            return findById(opts.id, auth).then(function(appts) {
              appts;
              var success;
              success = true;
              if (success) {
                return resolve(appts);
              } else {
                return reject(Error, err);
              }
            });
          });
        };
        return useId(opts, auth).then(function(appt) {
          var success;
          Promise.resolve(appt);
          theAppt.push(appt);
          success = true;
          if (success) {
            return resolve(theAppt);
          } else {
            return reject(Error, err);
          }
        });
      }
    });
  };

  cancelAppointment = function(apptId, auth) {
    var acuity, options, uri;
    console.log(apptId);
    acuity = Acuity.basic(auth);
    options = {
      method: 'PUT'
    };
    uri = "/appointments/" + apptId + "/cancel";
    console.log(uri);
    return new Promise(function(resolve, reject) {
      return acuity.request(uri, options, function(err, res, appointment) {
        var success;
        console.log(appointment);
        success = true;
        if (success) {
          return resolve(appointment);
        } else {
          return reject(Error, err);
        }
      });
    });
  };

  changeAppointment = function(options, auth) {
    var acuity, datetime, opts, uri;
    acuity = Acuity.basic(auth);
    console.log(options);
    datetime = options.dt;
    opts = {
      method: 'PUT',
      body: {
        datetime: datetime
      }
    };
    uri = "/appointments/" + options.id + "/reschedule";
    return new Promise(function(resolve, reject) {
      return acuity.request(uri, opts, function(err, res, appointment) {
        var success;
        if (err) {
          console.log(err);
        }
        console.log(appointment);
        success = true;
        if (success) {
          return resolve(appointment);
        } else {
          return reject(Error, console.log(err));
        }
      });
    });
  };

  module.exports = {
    change: function(options, auth) {
      return changeAppointment(options, auth).then(function(appt) {
        return appt;
      });
    },
    cancel: function(apptId, auth) {
      return cancelAppointment(apptId, auth).then(function(results) {
        if (results.error != null) {
          console.log(results);
          results = {
            apptStatus: 'not_cancelled',
            appt: "Oops! We have a bit of a problem...",
            error: results.error,
            message: results.message
          };
        } else {
          results.apptStatus = "cancelled";
        }
        return results;
      });
    },
    find: function(options, auth) {
      return findAppointment(options, auth).then(function(results) {
        var apptArray, result;
        if (results[0].error != null) {
          return results = {
            results: 'nothing found check email or id'
          };
        } else {
          console.log(results);
          apptArray = function(results) {
            return results.reduce(function(x, y) {
              x[moment(y.datetime).format("MMMM DD")] = y.id;
              return x;
            }, {});
          };
          console.log(JSON.stringify(apptArray(results)));
          return results = {
            foundAppointments: results.length > 0 ? true : false,
            howMany: results.length,
            idPayload: apptArray(results),
            simpleResults: (function() {
              var i, len, results1;
              results1 = [];
              for (i = 0, len = results.length; i < len; i++) {
                result = results[i];
                results1.push({
                  firstName: result.firstName,
                  lastName: result.lastName,
                  id: result.id,
                  date: result.date,
                  time: result.time,
                  datetime: result.datetime,
                  type: result.type,
                  calender: result.calendar
                });
              }
              return results1;
            })(),
            results: results
          };
        }
      });
    }
  };


  /*email = "brian@wynkk.co"
  id = 89736325
   */


  /*auth =
    userId: 13277271,
    apiKey: '3d97f0676ab38e48d902d8c7cd138855'
   */

  auth = local.auth;


  /*options =
    type: 'email'
    email: 'brian@wynkk.co'
    id:89736325
  
  find(options, auth).then (results) -> console.log results
   */


  /*findAppointment(options, auth).then (results) ->
  
    console.log results =
      foundAppointments: if results.length >0 then true else false
      howMany: results.length
      simpleResults:
        for result in results
          firstName: result.firstName
          lastName: result.lastName
          id: result.id
          date: result.date
          time: result.time
          datetime: result.datetime
          type:result.type
          calender:result.calendar
      results:results
   */

}).call(this);

//# sourceMappingURL=changeAppointmentService.js.map
