// Generated by CoffeeScript 1.12.4
(function() {
  var Acuity, acuity, moment;

  Acuity = require('acuityscheduling');

  acuity = Acuity.basic({
    userId: 13277271,
    apiKey: '3d97f0676ab38e48d902d8c7cd138855'
  });

  moment = require('moment');

  moment.tz = require('moment-timezone');

  module.exports = {
    getApptTypes: function(req, res) {
      return acuity.request('appointment-types', function(err, response, appointmentTypes) {
        var apt, data, i, len, results, types;
        results = JSON.stringify(appointmentTypes);
        data = JSON.parse(results);
        types = [];
        for (i = 0, len = data.length; i < len; i++) {
          apt = data[i];
          types.push({
            id: apt.id,
            name: apt.name.toLowerCase(),
            duration: apt.duration
          });
        }
        return res.json(types);
      });
    },
    findAppointment: function(req, res) {
      return acuity.request('appointments', function(err, response, appointments) {
        var appt, appts, data, emailFilter, filter, getAppts, i, len, results;
        results = JSON.stringify(appointments);
        data = JSON.parse(results);
        appts = [];
        for (i = 0, len = data.length; i < len; i++) {
          appt = data[i];
          appts.push({
            id: appt.id,
            name: appt.type.toLowerCase(),
            duration: appt.duration,
            firstName: appt.firstName,
            lastName: appt.lastName,
            date: appt.date,
            time: appt.time,
            end: appt.endTime,
            phone: appt.phone,
            email: appt.email
          });
        }
        emailFilter = req.query.email;
        filter = function(email) {
          var j, len1, results1, x;
          results1 = [];
          for (j = 0, len1 = appts.length; j < len1; j++) {
            x = appts[j];
            if (x.email === email) {
              results1.push(x);
            }
          }
          return results1;
        };
        getAppts = function(email, myAppts) {
          myAppts = [];
          if (email === 'all') {
            return myAppts = appts;
          } else {
            return myAppts = filter(email);
          }
        };
        console.log(getAppts(emailFilter));
        return res.json(getAppts(emailFilter));
      });
    },
    getDates: function(req, res) {
      var apptId, calId, m, month1, tz;
      month1 = moment(req.query.month).utcOffset(-5);
      m = month1.format("YYYY-MM");
      apptId = req.query.apptId;
      tz = req.query.tz;
      calId = req.query.calId;
      return acuity.request("availability/dates?appointmentTypeID=" + apptId + "&calendarID=" + calId + "&month=" + m + "&timezone=" + tz, function(err, response, days) {
        var availDates, data, day, i, len, results;
        results = JSON.stringify(days);
        console.log(days);
        data = JSON.parse(results);
        availDates = [];
        for (i = 0, len = data.length; i < len; i++) {
          day = data[i];
          availDates.push({
            date: day.date,
            day: moment(day.date).format("dddd"),
            dayFriendly: moment(day.date).calendar()
          });
        }
        console.log(m);
        console.log(availDates);
        return res.json(availDates);
      });
    },
    getTimes: function(req, res) {
      var apptTypeId, date, day, dcheck, tz;
      tz = req.query.tz;
      dcheck = moment(req.query.date).isDST();
      date = dcheck === true ? moment(req.query.date).utcOffset(-4).format() : moment(req.query.date).utcOffset(-5).format();
      day = moment(date).format("YYYY-MM-DD");
      apptTypeId = req.query.apptTypeId;
      return acuity.request("availability/times?appointmentTypeID=" + apptTypeId + "&date=" + day + "&timezone=" + tz, function(err, response, appointmentTimes) {
        var availTimes, availTimes2, data, i, j, len, len1, m, results, results1, time;
        results = JSON.stringify(appointmentTimes);
        data = JSON.parse(results);
        availTimes = [];
        for (i = 0, len = data.length; i < len; i++) {
          time = data[i];
          availTimes.push({
            time: moment(time.time).format(),
            timeFriendly: moment(time.time).calendar(null, {
              sameElse: 'dddd, MMMM Do, YYYY [at] Ha'
            }),
            available: time.slotsAvailable > 0 ? true : void 0,
            slots: time.slotsAvailable,
            matchRequest: moment(date).isSame(time.time) && time.slotsAvailable > 0 ? "match" : "nomatch"
          });
        }
        availTimes2 = availTimes.length > 0 ? availTimes : "nothing available";
        res.json(availTimes2);
        console.log("ok");
        results1 = [];
        for (j = 0, len1 = availTimes2.length; j < len1; j++) {
          m = availTimes2[j];
          if (m.matchRequest === "match") {
            results1.push(console.log(m));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      });
    },
    makeAppointment: function(req, res) {
      var apptId, dt, email, fn, ln, options, tz;
      apptId = req.query.apptId;
      dt = req.query.dateTime;
      email = req.query.email.toLowerCase();
      fn = req.query.firstName;
      ln = req.query.lastName;
      tz = req.query.tz;
      options = {
        method: 'POST',
        body: {
          appointmentTypeID: apptId,
          datetime: dt,
          firstName: fn,
          lastName: ln,
          email: email,
          phone: req.query.phone,
          timezone: tz
        }
      };
      return acuity.request('appointments', options, function(err, response, appointment) {
        var results;
        console.log(appointment);
        results = JSON.stringify(appointment);
        return res.json(appointment);
      });
    },
    cancelAppt: function(req, res) {
      var id, note, options;
      id = req.query.apptId;
      note = req.query.note;
      options = {
        method: 'PUT',
        body: {
          cancelNote: note
        }
      };
      return acuity.request("appointments/" + id + "/cancel", options, function(err, response, appointment) {
        if (err) {
          console.log(err);
        }
        return res.json(appointment);
      });
    }
  };

}).call(this);

//# sourceMappingURL=FooController.js.map
